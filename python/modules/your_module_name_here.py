"""
This is a template python file for reference use.

DO NOT EDIT THIS FILE.

Copy and rename the copy before modification.

Please include the following template for the top level docstring:

Title:
    - your_module_name_here

Developed by:
    - Your name yourCec@cisco.com

Description:
    - High Level overview of what the audit does

"""

import ncs
from .abs_audit import AbsAudit

class YourModuleNameHere(AbsAudit):
    """ Module class for YOUR_MODULE_NAME_HERE.
        The class msut implement "audit" & "remediate" methods.

        When called, NSO will pass the audit or remediate methods the parameters:
        self: an NSO object for the action. Can be used for logging with self.log.info()
        devices: A python list of device names to take action on (audit or remediate)
        output: and NSO object that stores the programs results.

        output details:
            attributes:
                results: type == ncsList. Add records of devices results
                    methods:
                        create: use output.results.create() to create new record of device results.
                                This method returns a results object.
                                The results object has attributes of:
                                    result: boolean (True if compliant, False if not)
                                    device: string of devices name

    """
    def __init__(self):
        self.group = "your_group_name_here"
        self.name = "your_module_name_here"

    def audit(self, devices, output):
        with ncs.maapi.single_write_trans('ncsadmin', 'python', groups=['ncsadmin']) as trans:
            root = ncs.maagic.get_root(trans)
            """
            Per inputed device add the audit results as follows:

            result = output.results.create()
            result.result = True
            result.device = (device name from input)
            """

    def remediate(self, devices, output):
        with ncs.maapi.single_write_trans('ncsadmin', 'python', groups=['ncsadmin']) as trans:
            root = ncs.maagic.get_root(trans)
            ## Bunch of remediation code here
            trans.apply() ## Apply the changes!
            """
            If your transaction succeeds than we know all devices succeeded :)
            So loop over all inputs and assign as true, or... do a transaction per device (warning, that is very slow!)

            Sample setting output:

            for device in devices:
              result = output.results.create()
              result.result = True
              result.device = (device name from input)
            """
